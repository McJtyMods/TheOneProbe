plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'com.modrinth.minotaur' version '2.+'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'net.neoforged.gradle.userdev' version "$neo_gradle_version"
}

version = mod_version
group = 'mcjty.theoneprobe'
base.archivesName = 'theoneprobe'

if (System.getenv('BUILD_NUMBER') != null) {
    version += "-${System.getenv('BUILD_NUMBER')}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        modSource project.sourceSets.main
    }

    client {
    }

    server {
        programArgument '--nogui'
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

repositories {
    maven {
        name 'JEI/Patchouli'
        url 'https://maven.blamejared.com'
    }
}

dependencies {
    implementation "net.neoforged:neoforge:$neo_version"

    compileOnly "mezz.jei:jei-$minecraft_version-common-api:$jei_version"
    compileOnly "mezz.jei:jei-$minecraft_version-neoforge-api:$jei_version"
    runtimeOnly "mezz.jei:jei-$minecraft_version-neoforge:$jei_version"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(['-Xmaxerrs', '100000'])
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
        minecraft_version       : minecraft_version,
        minecraft_version_range : minecraft_version_range,
        neo_version             : neo_version,
        neo_version_range       : neo_version_range,
        loader_version_range    : loader_version_range,
        mod_version             : mod_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            'Specification-Title'       : 'theoneprobe',
            'Specification-Vendor'      : 'McJty',
            'Specification-Version'     : '1',
            'Implementation-Title'      : project.name,
            'Implementation-Version'    : project.version,
            'Implementation-Vendor'     : 'McJty',
        ])
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.register('apiJar', Jar) {
    archiveClassifier = 'api'
    from(sourceSets.main.output) {
        include 'mcjty/theoneprobe/api/**'
    }
}

artifacts {
    archives apiJar
}

publishing {
    publications.create('mavenJava', MavenPublication) {
        from components.java
        artifact apiJar

        artifactId = project.archivesBaseName
        pom {
            name = 'RFToolsBase'
            description = 'Base mod for all McJty tech mods'
            scm {
                url = 'https://github.com/McJtyMods/RFToolsBase'
                connection = 'scm:git:git@github.com:McJtyMods/RFToolsBase.git'
                developerConnection = 'scm:git:git@github.com:McJtyMods/RFToolsBase.git'
            }
            issueManagement {
                system = 'github'
                url = 'https://github.com/McJtyMods/RFToolsBase/issues'
            }
            licenses {
                license {
                    name = 'MIT'
                    distribution = 'repo'
                }
            }
            developers {
                developer {
                    id = 'McJty'
                    name = 'McJty'
                    roles = ['developer']
                }
            }
        }
    }
    repositories {
        if (System.getenv('local_maven') != null) {
            maven {
                name = 'local'
                url = 'file://' + System.getenv('local_maven')
            }
        }
    }
}

String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "${mod_name} ${mod_version}"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>");
                temp = temp.replaceAll("#([0-9]+)\\b(?!<\\/a>)", "<a href=\"https://github.com/$github_project/issues/\$1\">\$0</a>");
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}

tasks.curseforge.enabled = project.hasProperty('curseforge_key')

curseforge {
    if (project.hasProperty('curseforge_key')) {
        apiKey = project.curseforge_key
    }

    project {
        id = project.projectId
        changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG').equals('none') ? getChangelogText() : System.getenv('CHANGELOG')
        changelogType = 'html'
        releaseType = project.curse_type
        addGameVersion project.minecraft_version
        mainArtifact(jar) {
            displayName = "${mod_name} - ${mod_version}"
        }
        relations {
            optionalDependency 'baubles'
            optionalDependency 'tesla'
            optionalDependency 'redstone-flux'
        }
    }
}

tasks.modrinth.enabled = project.hasProperty('modrinth_token')
modrinth {
    if (project.hasProperty('modrinth_token')) {
        token = project.modrinth_token
    }
    projectId = project.projectSlug
    versionType = project.curse_type
    versionName = "${mod_name} - ${mod_version}"
    uploadFile = jar
    gameVersions = [project.minecraft_version]
    changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG').equals('none') ? getChangelogText() : System.getenv('CHANGELOG')
}
